(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{280:function(t,a,s){"use strict";s.r(a);var e=s(13),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"java8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java8"}},[t._v("#")]),t._v(" Java8")]),t._v(" "),s("h3",{attrs:{id:"函数式接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数式接口"}},[t._v("#")]),t._v(" 函数式接口")]),t._v(" "),s("p",[t._v("声明仅有一个抽象方法的接口，可以在一个接口上使用 "),s("code",[t._v("@FunctionalInterface")]),t._v(" 注解。")]),t._v(" "),s("h4",{attrs:{id:"四大核心函数式接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四大核心函数式接口"}},[t._v("#")]),t._v(" 四大核心函数式接口")]),t._v(" "),s("p",[s("code",[t._v("Consumer<T>、Supplier<T>、Function<T,R>、Predicate<T>")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("接口")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("参数类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("返回类型")]),t._v(" "),s("th",[t._v("用途")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Consumer<T> 消费型接口")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("T")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("void")]),t._v(" "),s("td",[t._v("对类型为 T 的对象应用操作，包含方法，"),s("code",[t._v("void accept(T t)")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Supplier<T> 供给型接口")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("无")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("T")]),t._v(" "),s("td",[t._v("返回类型为 T  的对象，包含方法，"),s("code",[t._v("T get()")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Function<T, R> 函数型接口")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("T")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("R")]),t._v(" "),s("td",[t._v("对类型为 T 的对象应用操作，并返回结果。结果是 R 类型的对象。包含方法，"),s("code",[t._v("R apply(T t)")])])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Predicate<T> 断定型接口")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("T")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("boolean")]),t._v(" "),s("td",[t._v("确定类型为 T 的对象是否满足某约束，并返回 boolean 值。包含方法，"),s("code",[t._v("boolean test(T t)")])])])])]),t._v(" "),s("h3",{attrs:{id:"lambda表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lambda表达式"}},[t._v("#")]),t._v(" Lambda表达式")]),t._v(" "),s("p",[s("code",[t._v("->")]),t._v(" ：lambda 操作符，左边是形参列表，就是接口中的抽象方法的形参列表。右边是 lambda 体，就是重写的抽象方法的方法体。")]),t._v(" "),s("p",[t._v("本质就是"),s("strong",[t._v("函数式接口的一个实例")]),t._v("，当需要对函数式接口实例化的时候才使用 Lambda 表达式。")]),t._v(" "),s("ol",[s("li",[t._v("无参，无返回值")]),t._v(" "),s("li",[t._v("需要一个参数，无返回值")]),t._v(" "),s("li",[t._v("数据类型可以省略，由编译器推断出，类型推断")]),t._v(" "),s("li",[t._v("需要一个参数，参数的小括号可以省略")]),t._v(" "),s("li",[t._v("需要两个或以上的参数，多条执行语句，并有返回值")]),t._v(" "),s("li",[t._v("只有一条语句，return 与 大括号都可以省略")])]),t._v(" "),s("h3",{attrs:{id:"方法引用与构造器引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法引用与构造器引用"}},[t._v("#")]),t._v(" 方法引用与构造器引用")]),t._v(" "),s("p",[t._v("当要传递给 Lambda 体的操作，已经有实现的方法了，可以使用方法引用。要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同（针对一下情况1、2）。")]),t._v(" "),s("ul",[s("li",[t._v("对象 :: 非静态方法")]),t._v(" "),s("li",[t._v("类 :: 静态方法")]),t._v(" "),s("li",[t._v("类 :: 非静态方法")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空参构造器引用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sup1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sup2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sup3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fun1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" fun2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Employee")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("h3",{attrs:{id:"stream-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stream-api"}},[t._v("#")]),t._v(" Stream API")]),t._v(" "),s("p",[t._v("Stream 关注的是对数据的运算，与 CPU 打交道，集合关注的是数据的存储，与内存打交道。")]),t._v(" "),s("h4",{attrs:{id:"执行流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行流程"}},[t._v("#")]),t._v(" 执行流程")]),t._v(" "),s("p",[t._v("Stream 实例化、一系列的中间操作（过滤，映射）、终止操作。")]),t._v(" "),s("ol",[s("li",[t._v("一个中间操作链，对数据源的数据进行处理。")]),t._v(" "),s("li",[t._v("一旦执行终止操作，就执行中间操作链，并产生结果，之后不会被使用。")])]),t._v(" "),s("h4",{attrs:{id:"中间操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间操作"}},[t._v("#")]),t._v(" 中间操作")]),t._v(" "),s("p",[s("strong",[t._v("筛选与切片")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("filter(Predicate p)")]),t._v(" 接收 Lambda，从流中排除某些元素")]),t._v(" "),s("li",[s("code",[t._v("limit(n)")]),t._v(" 截断流，使其元素不超过给定数量")]),t._v(" "),s("li",[s("code",[t._v("skip(n)")]),t._v(" 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素数量不足 n 个，则返回一个空流。")]),t._v(" "),s("li",[s("code",[t._v("distinct()")]),t._v(" 筛选，通过流所生成元素的 hashCode() 和 equals() 去除重复元素")])]),t._v(" "),s("p",[s("strong",[t._v("映射")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("map(Function f)")]),t._v(" 接收一个函数作为参数，将元素转换成其他形式或提取信息，该函数会被应用到每个元素上，并将其映射成一个新的元素。")]),t._v(" "),s("li",[s("code",[t._v("flatMap(Function f)")]),t._v(" 接收一个函数作为参数，将流中的每个值都换成另外一个流，然后把所有的流连接成一个流。")])]),t._v(" "),s("p",[s("strong",[t._v("排序")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("sorted()")]),t._v(" 自然排序")]),t._v(" "),s("li",[s("code",[t._v("sorted(Comparator com)")]),t._v(" 定制排序")])]),t._v(" "),s("h4",{attrs:{id:"终止操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#终止操作"}},[t._v("#")]),t._v(" 终止操作")]),t._v(" "),s("p",[s("strong",[t._v("匹配与查找")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("allMatch(Predicate p)")]),t._v(" 检查是否匹配所有元素")]),t._v(" "),s("li",[s("code",[t._v("anyMatch(Predicate p)")]),t._v(" 检查是否至少匹配一个元素")]),t._v(" "),s("li",[s("code",[t._v("noneMatch(Predicate p)")]),t._v(" 检查是否没有匹配所有元素")]),t._v(" "),s("li",[s("code",[t._v("findFirst()")]),t._v(" 返回第一个元素")]),t._v(" "),s("li",[s("code",[t._v("findAny()")]),t._v(" 返回当前流中的任意元素")]),t._v(" "),s("li",[s("code",[t._v("count()")])]),t._v(" "),s("li",[s("code",[t._v("max(Comparator c)")])]),t._v(" "),s("li",[s("code",[t._v("min(Comparator c)")])]),t._v(" "),s("li",[s("code",[t._v("forEach(Comsumer c)")])])]),t._v(" "),s("p",[s("strong",[t._v("归约")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("reduce(T identity, BinaryOperator)")]),t._v(" 将流中的元素反复结合起来，得到一个值。返回 T")]),t._v(" "),s("li",[s("code",[t._v("reduce(BinaryOperator)")]),t._v(" 将流中元素反复结合起来，得到一个值。返回 Optional<T>")])]),t._v(" "),s("p",[s("strong",[t._v("收集")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("collect(Collector c)")]),t._v(" 将流转换为其他形式。接收一个 Collector 接口的实现，用于给 Stream 中元素做汇总的方法。Collector 接口中方法的实现决定了如何对流执行收集的操作。")])]),t._v(" "),s("h3",{attrs:{id:"optional-类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#optional-类"}},[t._v("#")]),t._v(" Optional 类")]),t._v(" "),s("p",[t._v("是一个容器类，它可以保存类型 T 的值，代表这个值存在，或者仅仅保存 null ，表示这个值不存在。可以避免空指针的存在。")])])}),[],!1,null,null,null);a.default=n.exports}}]);