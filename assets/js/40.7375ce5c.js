(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{306:function(a,t,s){"use strict";s.r(t);var v=s(13),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"系统概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统概述"}},[a._v("#")]),a._v(" 系统概述")]),a._v(" "),s("h2",{attrs:{id:"xargs-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xargs-的作用"}},[a._v("#")]),a._v(" xargs 的作用")]),a._v(" "),s("p",[s("code",[a._v("xargs")]),a._v(" 将标准输入流中的字符串分割成一条条子字符串，然后再按照我们自己想要的方式构建成一条条指令，大大拓展了 Linux 指令的能力。")]),a._v(" "),s("p",[a._v("比如我们可以用来按照某种特定的方式逐个处理一个目录下所有的文件；根据一个 IP 地址列表逐个 ping 这些 IP，收集到每个 IP 地址的延迟等。")]),a._v(" "),s("h2",{attrs:{id:"linux-权限划分的原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-权限划分的原则"}},[a._v("#")]),a._v(" Linux 权限划分的原则")]),a._v(" "),s("p",[a._v("Linux 遵循最小权限原则。")]),a._v(" "),s("ul",[s("li",[a._v("每个用户掌握的权限应该足够小，每个组掌握的权限也足够小。实际生产过程中，最好管理员权限可以拆分，互相牵制防止问题。")]),a._v(" "),s("li",[a._v("每个应用应当尽可能小的使用权限。最理想的是每个应用单独占用一个容器（比如 Docker），这样就不存在互相影响的问题。即便应用被攻破，也无法攻破 Docker 的保护层。")]),a._v(" "),s("li",[a._v("尽可能少的 root。如果一个用户需要 root 能力，那么应当进行权限包围——马上提升权限（比如 sudo），处理后马上释放权限。")]),a._v(" "),s("li",[a._v("系统层面实现权限分级保护，将系统的权限分成一个个 Ring，外层 Ring 调用内层 Ring 时需要内层 Ring 进行权限校验。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220313164358757.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"如何查看一个域名有哪些-ns-记录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何查看一个域名有哪些-ns-记录"}},[a._v("#")]),a._v(" 如何查看一个域名有哪些 NS 记录")]),a._v(" "),s("p",[a._v("host 指令提供了一个"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"5901"}},[a._v("-t")]),a._v("参数指定需要查找的记录类型。我们可以使用 host -t ns {网址}。另外 dig 也提供了同样的能力。")]),a._v(" "),s("h2",{attrs:{id:"编译安装-和-包管理器安装-有什么优势和劣势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译安装-和-包管理器安装-有什么优势和劣势"}},[a._v("#")]),a._v(" 编译安装 和 包管理器安装 有什么优势和劣势")]),a._v(" "),s("p",[a._v("包管理安装很方便，但是有两点劣势。")]),a._v(" "),s("ul",[s("li",[a._v("第一点是需要提前将包编译好，因此有一个发布的过程，如果某个包没有发布版本，或者在某个平台上找不到对应的发布版本，就需要编译安装。")]),a._v(" "),s("li",[a._v("第二点就是如果一个软件的定制程度很高，可能会在编译阶段传入参数，比如利用 "),s("strong",[a._v("configure")]),a._v(" 传入配置参数，这种时候就需要编译安装。")])]),a._v(" "),s("h2",{attrs:{id:"用户态线程和内核态线程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用户态线程和内核态线程的区别"}},[a._v("#")]),a._v(" 用户态线程和内核态线程的区别")]),a._v(" "),s("p",[a._v("一个进程启动后会在内存中创建一个执行副本")]),a._v(" "),s("p",[a._v("用户态线程工作在"),s("strong",[a._v("用户空间")]),a._v("，内核态线程工作在"),s("strong",[a._v("内核空间")]),a._v("。用户态线程调度完全由进程负责，通常就是由进程的"),s("strong",[a._v("主线程")]),a._v("负责。相当于进程主线程的延展，使用的是操作系统分配给进程主线程的时间片段。内核线程由"),s("strong",[a._v("内核")]),a._v("维护，由操作系统调度。")]),a._v(" "),s("p",[a._v("用户态线程无法跨核心，一个进程的多个用户态线程不能并行，阻塞一个用户态线程会导致进程的主线程阻塞，直接交出执行权限。这些都是用户态线程的劣势，但是它管理开销小，切换成本低。内核线程可以"),s("strong",[a._v("独立执行")]),a._v("，可以在多个核心并行执行，操作系统会分配时间片段，并发能力高。因此内核态线程更完整，也称作轻量级进程。内核态线程创建成本高，切换成本高，CPU 会从用户态变为内核态，创建太多还会给调度算法增加压力，因此不会太多。")]),a._v(" "),s("blockquote",[s("p",[a._v("CPU有用户态和内核态的切换；为了实现切换，需要中断；为了保护内存资源，需要划分用户态和内核态；为了更好地使用计算资源，需要划分线程 - 线程的操作需要操作系统的内核调度。")])]),a._v(" "),s("h2",{attrs:{id:"线程的调度方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的调度方法"}},[a._v("#")]),a._v(" 线程的调度方法")]),a._v(" "),s("p",[a._v("回答这个问题你要把握主线，千万不要教科书般的回答："),s("strong",[a._v("任务调度分成抢占和非抢占的，抢占的可以轮流执行，也可以用优先级队列执行；非抢占可以先到先服务，也可以最短任务优先")]),a._v("。")]),a._v(" "),s("p",[a._v("上面这种回答可以用来过普通的程序员岗位，但是面试官其实更希望听到你的见解，这是初中级开发人员与高级开发人员之间的差异。")]),a._v(" "),s("p",[a._v("比如你告诉面试官：非抢占的先到先服务的模型是最朴素的，公平性和吞吐量可以保证。但是因为希望减少用户的平均等待时间，操作系统往往需要实现抢占。操作系统实现抢占，仍然希望有优先级，希望有最短任务优先。\n但是这里有个困难，操作系统无法预判每个任务的预估执行时间，就需要使用分级队列。最高优先级的任务可以考虑非抢占的优先级队列。 其他任务放到分级队列模型中执行，从最高优先级时间片段最小向最低优先级时间片段最大逐渐沉淀。这样就同时保证了小任务先行和高优任务最先执行。")]),a._v(" "),s("p",[a._v("以上的回答，并不是一种简单的概括，还包含了你对问题的理解和认知。在面试时，正确性并不是唯一的考量指标，面试官更看重候选人的思维能力。这也是为什么很多人面试问题都答上来了，仍然没有拿到 offer 的原因。如果面试目标是正确性，为什么不让你开卷考试呢？ 上维基百科看不是更正确吗？")]),a._v(" "),s("h2",{attrs:{id:"死锁产生的必要条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁产生的必要条件"}},[a._v("#")]),a._v(" 死锁产生的必要条件")]),a._v(" "),s("p",[a._v("互斥条件：有互斥使用的资源")]),a._v(" "),s("p",[a._v("不可剥夺：进程获得的资源只能主动释放")]),a._v(" "),s("p",[a._v("请求和保持：进程拥有至少一个资源，但是又有新的资源要请求，该资源被其他进程占有，请求进程阻塞，对自己的资源不释放")]),a._v(" "),s("p",[a._v("循环等待：进程资源的循环等待链")]),a._v(" "),s("h2",{attrs:{id:"什么情况下会触发饥饿和死锁-并发控制算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下会触发饥饿和死锁-并发控制算法"}},[a._v("#")]),a._v(" 什么情况下会触发饥饿和死锁？（并发控制算法）")]),a._v(" "),s("p",[a._v("线程需要资源没有拿到，无法进行下一步，就是饥饿。死锁（Deadlock）和活锁（Livelock）都是饥饿的一种形式。 非抢占的系统中，互斥的资源获取，形成循环依赖就会产生死锁。进程推进顺序非法。信号量使用不当。")]),a._v(" "),s("p",[a._v("死锁发生后，如果利用抢占解决，导致资源频繁被转让，有一定概率触发活锁。死锁、活锁，都可以通过设计并发控制算法解决，比如哲学家就餐问题。")]),a._v(" "),s("h2",{attrs:{id:"进程间的通信方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程间的通信方式"}},[a._v("#")]),a._v(" 进程间的通信方式")]),a._v(" "),s("p",[a._v("如果考虑"),s("strong",[a._v("单机")]),a._v("模型，有管道、内存共享、消息队列。这三个模型中，内存共享程序最难写，但是性能最高，共享空间是互斥的。管道程序最好写，有标准接口。消息队列程序也比较好写，比如用发布/订阅模式实现具体的程序。")]),a._v(" "),s("p",[a._v("如果考虑"),s("strong",[a._v("分布式")]),a._v("模型，就有远程调用、消息队列和网络请求。直接发送网络请求程序不好写，不如直接用实现好的 RPC 调用框架。RPC 框架会增加系统的耦合，可以考虑 消息队列，以及发布订阅事件的模式，这样可以减少系统间的耦合。")]),a._v(" "),s("h2",{attrs:{id:"一些指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一些指令"}},[a._v("#")]),a._v(" 一些指令")]),a._v(" "),s("blockquote",[s("p",[a._v("dpkg - Debian package")]),a._v(" "),s("p",[a._v("rpm - Redhat package manager")]),a._v(" "),s("p",[a._v("yum - Yellodog Updater, Modified  (Centos)")]),a._v(" "),s("p",[a._v("apt - Advanced Packaging Toos (Ubuntu)")]),a._v(" "),s("p",[a._v("cat - concatenate")]),a._v(" "),s("p",[a._v("Nginx - engine X")]),a._v(" "),s("p",[a._v("gcc - GNU Compiler Collection (编译器)")]),a._v(" "),s("p",[a._v("PV - Page View ，用户访问一次页面就是一次 Page View")]),a._v(" "),s("p",[a._v("UV - Uniq Visitor ，访问人数")])]),a._v(" "),s("h2",{attrs:{id:"os-特征"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#os-特征"}},[a._v("#")]),a._v(" OS 特征")]),a._v(" "),s("p",[a._v("并发、共享")]),a._v(" "),s("p",[a._v("虚拟：空分复用（虚拟存储）、时分复用（虚拟处理技术）")]),a._v(" "),s("p",[a._v("异步：程序并发执行，系统的资源有限，进程的执行不是一贯到底，走走停停的执行。")]),a._v(" "),s("h2",{attrs:{id:"运行机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行机制"}},[a._v("#")]),a._v(" 运行机制")]),a._v(" "),s("p",[a._v("CPU 有两种状态，"),s("strong",[a._v("内核态")]),a._v("和"),s("strong",[a._v("用户态")]),a._v("，前者正在运行内核程序，很多内核程序就组成了操作系统的内核。可以使用特权指令， 程序状态字寄存器（PSW）表示两种状态。")]),a._v(" "),s("p",[a._v("内核 -> 用户，一条修改PSW的特权指令完成；用户态 -> 内核态，中断。")]),a._v(" "),s("h2",{attrs:{id:"中断和异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断和异常"}},[a._v("#")]),a._v(" 中断和异常")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329104309005.png",alt:""}})]),a._v(" "),s("p",[a._v("中断是OS kernel夺回CPU使用权的唯一途径，没有中断技术，无法实现并发。")]),a._v(" "),s("p",[a._v('判断内外中断看是否与指令相关，内中断经常称为"异常"。中断程序处于内核态')]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329103947697.png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"内中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内中断"}},[a._v("#")]),a._v(" 内中断")]),a._v(" "),s("p",[a._v("CPU 内部，陷入"),s("strong",[a._v("指令")]),a._v("可以完成系统调用，应用程序故意引发的。")]),a._v(" "),s("h3",{attrs:{id:"外中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#外中断"}},[a._v("#")]),a._v(" 外中断")]),a._v(" "),s("p",[a._v("时钟中断、IO中断")]),a._v(" "),s("h2",{attrs:{id:"系统调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[a._v("#")]),a._v(" 系统调用")]),a._v(" "),s("p",[a._v("应用程序请求OS服务的唯一方式，与共享资源相关的操作")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329104707144.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329105559769.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329110416309.png",alt:""}})]),a._v(" "),s("h1",{attrs:{id:"进程管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程管理"}},[a._v("#")]),a._v(" 进程管理")]),a._v(" "),s("p",[a._v("进程是系统分配资源和调度的独立单位，引入线程就是线程是调度的基本单位，但是进程还是获得资源的基本单位。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329121242481.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329123226542.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"进程的状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程的状态"}},[a._v("#")]),a._v(" 进程的状态")]),a._v(" "),s("p",[a._v("进程状态的切换：进程运行的时间片到了，更高优先级的进程到来，进程主动请求阻塞，进程运行终止。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329124131092.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329161513308.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329150205745.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"进程通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程通信"}},[a._v("#")]),a._v(" 进程通信")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329152253187.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329153522600.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"多线程模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程模型"}},[a._v("#")]),a._v(" 多线程模型")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329160225416.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329160413709.png",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度"}},[a._v("#")]),a._v(" 调度")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329161841286.png",alt:""}})]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329164330178.png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"抢占式调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抢占式调度"}},[a._v("#")]),a._v(" 抢占式调度")]),a._v(" "),s("p",[a._v("由OS剥夺当前进程的CPU使用权")]),a._v(" "),s("h3",{attrs:{id:"非抢占式调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非抢占式调度"}},[a._v("#")]),a._v(" 非抢占式调度")]),a._v(" "),s("p",[a._v("只能由当前进行的进程主动放弃CPU")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220329171228520.png",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"调度算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度算法"}},[a._v("#")]),a._v(" 调度算法")]),a._v(" "),s("h4",{attrs:{id:"批处理系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#批处理系统"}},[a._v("#")]),a._v(" 批处理系统")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220402124548919.png",alt:""}})]),a._v(" "),s("p",[a._v("FCFS（先来先服务）：非抢占式的算法，公平，算法实现简单；长作业后面的短作业用户体验不好。不会导致饥饿。")]),a._v(" "),s("p",[a._v("SJF（短作业优先）：非抢占式，追求最少的平均等待时间，要求被服务时间最短的优先。短作业源源不断地到来，长作业长时间得不到服务，导致长作业饥饿。SRTN（最短剩余时间优先算法）：抢占式")]),a._v(" "),s("p",[a._v("HRRN（高响应比优先）：非抢占式， 每次进程调度计算响应比优先级，响应比优先级高的先运行。综合考虑了等待时间和运行时间。等待时间相同时，要求服务时间短的优先；要求服务时间相同时，等待时间长的优先。不会导致饥饿。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220402123820590.png",alt:""}})]),a._v(" "),s("h4",{attrs:{id:"交互式系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#交互式系统"}},[a._v("#")]),a._v(" 交互式系统")]),a._v(" "),s("p",[a._v("RR（时间片轮转调度）：抢占式的，轮流让各个进程执行一个时间片。公平，响应快；高频的进程切换，有一定的开销，不区分任务的紧急程度。不会导致饥饿。")]),a._v(" "),s("p",[a._v("HPF（最高优先级调度）：")]),a._v(" "),s("p",[a._v("MFQ（多级反馈队列调度）：")]),a._v(" "),s("h1",{attrs:{id:"内存管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[a._v("#")]),a._v(" 内存管理")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1204/image-20220518172340729.png",alt:""}})])])}),[],!1,null,null,null);t.default=_.exports}}]);