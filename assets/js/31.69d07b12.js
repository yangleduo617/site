(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{292:function(s,a,t){"use strict";t.r(a);var n=t(13),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"chapter14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter14"}},[s._v("#")]),s._v(" Chapter14")]),s._v(" "),t("h2",{attrs:{id:"泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[s._v("#")]),s._v(" 泛型")]),s._v(" "),t("h3",{attrs:{id:"泛型的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型的好处"}},[s._v("#")]),s._v(" 泛型的好处")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("编译时，检查添加元素的类型，提高了安全性。")])]),s._v(" "),t("li",[t("p",[s._v("减少了类型转换的次数，提高了效率。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ArrayList")]),s._v("不使用泛型时，先向上转型为"),t("code",[s._v("Object")]),s._v("，在取出时，还需要转换成相应的类型才能调用方法。")])])])]),s._v(" "),t("h2",{attrs:{id:"自定义泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义泛型"}},[s._v("#")]),s._v(" 自定义泛型")]),s._v(" "),t("h3",{attrs:{id:"自定义泛型类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义泛型类"}},[s._v("#")]),s._v(" 自定义泛型类")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("类的 后面加"),t("code",[s._v("泛型")]),s._v("，所以我们把该类 就称为自定义泛型类")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Tiger")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("R")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("M")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("T, R, M 泛型的标识符, 一般是单个大写字母")])]),s._v(" "),t("li",[t("p",[s._v("泛型标识符可以有多个")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("普通成员")]),s._v("可以使用泛型(属性、方法)")])]),s._v(" "),t("li",[t("p",[s._v("使用泛型的"),t("code",[s._v("数组")]),s._v("，不能初始化")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 因为数组在new 不能确定T 的类型，就无法在内存开空间")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// wrong ")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("静态方法、属性")]),s._v("中不能使用类的泛型，因为静态是和类相关的，在类加载时，对象还没有创建。所以，如果静态方法和静态属性使用了泛型，JVM 就无法完成初始化。")])])]),s._v(" "),t("h3",{attrs:{id:"自定义泛型接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义泛型接口"}},[s._v("#")]),s._v(" 自定义泛型接口")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" 接口名"),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("R")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",[t("li",[t("p",[s._v("接口中，静态成员不能用"),t("code",[s._v("泛型")])])]),s._v(" "),t("li",[t("p",[s._v("泛型接口的类型在"),t("code",[s._v("继承")]),s._v("接口或者"),t("code",[s._v("实现")]),s._v("接口时确定")])]),s._v(" "),t("li",[t("p",[s._v("没有指定类型，默认为"),t("code",[s._v("Object")])])])]),s._v(" "),t("h3",{attrs:{id:"自定义泛型方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义泛型方法"}},[s._v("#")]),s._v(" 自定义泛型方法")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("访问修饰符 "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("R")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" 返回类型 方法名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("参数列表"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ol",[t("li",[t("p",[s._v("泛型方法，可以定义在普通类中, 也可以定义在泛型类中")])]),s._v(" "),t("li",[t("p",[s._v("当调用方法时，传入参数，编译器就会确定类型")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("public void eat(E e) {}")]),s._v("，该方法只是使用了泛型，但不是泛型方法，可以使用"),t("code",[s._v("类声明")]),s._v("的泛型，也可以使用"),t("code",[s._v("自己声明")]),s._v("的泛型")])])]),s._v(" "),t("h2",{attrs:{id:"通配符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通配符"}},[s._v("#")]),s._v(" 通配符")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("泛型不具备继承")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 泛型没有继承性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// wrong")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[s._v("\n<?> 支持任意泛型类型\n")]),s._v(" "),t("li",[t("p",[t("code",[s._v("<? extends A>")]),s._v("：支持A类以及A类的子类，规定了泛型的"),t("strong",[s._v("上限")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("<? super A>")]),s._v("：支持A类以及A类的父类（不限于直接父类），规定了泛型的"),t("strong",[s._v("下限")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);